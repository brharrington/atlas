
atlas.akka {
  # Regex that determines how the path tag value to use when mapping data about an actor into a
  # meter. There a should be a single capture group which will be the path to report.
  pathPattern = "^akka://(?:[^/]+)/(?:system|user)/(IO-TCP|IO-HTTP)/.*$"

  # List of classes to load as API endpoints
  api-endpoints = ${?atlas.akka.api-endpoints} [
    "com.netflix.atlas.akka.ConfigApi",
    "com.netflix.atlas.akka.StaticPages"
  ]
}

akka {
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  loglevel = "INFO"
  actor {
    debug {
      receive = on
      autoreceive = on
      lifecycle = on
    }
    default-mailbox {
      mailbox-type = "com.netflix.atlas.akka.UnboundedMeteredMailbox"
    }

    default-dispatcher {
      fork-join-executor {
        parallelism-factor = 8.0
      }
    }
  }

  io {
    tcp {
      max-channels = 256000
      trace-logging = off
    }
  }
}

spray.can {
  client {
    response-chunk-aggregation-limit = 0
  }

  host-connector {
    max-connections = 10
    max-retries = 0
    max-redirects = 0
    pipelining = off
    idle-timeout = 30 s
  }

  server {
    server-header = atlas/1.3

    # uncomment the next line for making this an HTTPS example
    # ssl-encryption = on
    idle-timeout = 30 s
    request-timeout = 10 s
    pipelining-limit = 20

    # Add the remote address into the request, useful for trying to figure out where traffic
    # is coming from.
    remote-address-header = on

    verbose-error-messages = on

    # https://groups.google.com/forum/#!msg/spray-user/TqkPlxjDlm8/fl33xVIlnIcJ
    # Lots of remote closed
    #registration-timeout = infinite

    request-chunk-aggregation-limit = 0

    parsing.uri-parsing-mode=relaxed
    parsing.max-uri-length = 4k
    parsing.max-content-length = 8m
    parsing.incoming-auto-chunking-threshold-size = 8m
  }
}
